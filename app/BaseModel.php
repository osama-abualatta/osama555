<?php

namespace App;

use App\Scopes\FilterScope;
use Illuminate\Database\Eloquent\Model;

class BaseModel extends Model
{

    protected $appends = [
        'resource'
    ];



    /**
     *
     * BaseModel constructor.
     * @param array $attributes
     * @author Amr
     */
    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
    }


    /**
     * @return string
     */
    public function getResourceAttribute()
    {
        return get_class($this);
    }

    /**
     * @author WeSSaM
     * @return bool
     */
    public function canChangeStatus()
    {
        return true;
    }

    /**
     * @author WeSSaM
     * @return bool
     */
    public function canDelete()
    {
        return true;
    }

    /**
     * @param $related
     * @param $through
     * @param $firstKey
     * @param $secondKey
     * @param $pivotKey
     * @return mixed
     */
    public function manyThroughMany($related, $through, $firstKey, $secondKey, $pivotKey)
    {
        $model = new $related;
        $table = $model->getTable();
        $throughModel = new $through;
        $pivot = $throughModel->getTable();
        return $model
            ->join($pivot, $pivot . '.' . $pivotKey, '=', $table . '.' . $secondKey)
            ->select($table . '.*')
            ->where($pivot . '.' . $firstKey, '=', $this->id);
    }

    public static function getFilterMap()
    {
        return [];
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope(new FilterScope());
    }

    public function deleteAuthorized()
    {
        return true;
    }

    /**
     * @param $q
     * @return mixed
     */
    public function scopeActive($q)
    {
        return $q->where('is_active', 1);
    }

    public function hasMany($related, $foreignKey = null, $localKey = null)
    {
        return parent::hasMany($related, $foreignKey, $localKey)->withoutGlobalScopes();
    }

    public function hasOne($related, $foreignKey = null, $localKey = null)
    {
        return parent::hasOne($related, $foreignKey, $localKey)->withoutGlobalScopes();
    }

    public function belongsTo($related, $foreignKey = null, $ownerKey = null, $relation = null)
    {
        return parent::belongsTo($related, $foreignKey, $ownerKey, $relation)->withoutGlobalScopes();// parent::belongsTo();//->withoutGlobalScopes();
    }

//
//    public function relationLoaded($key)
//    {
//        dd(parent::relationLoaded($key));
//    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphMany
     */
    public function images()
    {
        return $this->morphMany(Image::class, 'image');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphOne
     */
    public function image()
    {
        return $this->morphOne(Image::class, 'image')->latest();
    }
}
